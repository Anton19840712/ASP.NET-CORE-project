// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Web.DAL.Models;

namespace Web.DAL.Migrations
{
    [DbContext(typeof(AppIdentityDbContext))]
    [Migration("20210616213249_NewEntitiesConfiguration")]
    partial class NewEntitiesConfiguration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.6")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Web.DAL.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "e4b49401-6162-4ac9-8dc9-ab0f6b838ef7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "af544f15-e828-4376-ab47-e4d3cc06a5cb",
                            EmailConfirmed = false,
                            LastName = "Jones",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d6d770bc-48f8-4e03-868e-85f4f79bbc9e",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "3dbb8802-d038-4461-beba-928d31e00d87",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "92d257c9-9cb5-40e5-b877-f1abd2163da7",
                            EmailConfirmed = false,
                            LastName = "Trump",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f29d78e4-1425-4daa-b20d-63ee1765ad50",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "bb18ca1a-9067-42b7-b2c2-94e2304bfccc",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "91237bb7-6d29-4213-8928-7e87e85a91e1",
                            EmailConfirmed = false,
                            LastName = "Obama",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5db8edde-cdee-4b24-bb98-66e9572f7125",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "3158c3a3-d03c-413c-9de9-d361bea247db",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "684e05cb-d439-4721-bfdf-f72705d233e1",
                            EmailConfirmed = false,
                            LastName = "Richter",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "dd415d80-368c-44fe-87c7-83a811ecb67f",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "9bd9c99a-ec7b-4ecd-9d0f-a0bae3e3ad87",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "951b122e-c12e-4f34-a628-c240b3751f38",
                            EmailConfirmed = false,
                            LastName = "Suzuki",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ce668173-f19f-4fa9-b4f8-92d6b234be1d",
                            TwoFactorEnabled = false
                        });
                });

            modelBuilder.Entity("Web.DAL.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Background")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<int>("Genre")
                        .HasColumnType("int");

                    b.Property<string>("Logo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("RatingByAge")
                        .HasColumnType("int");

                    b.Property<int>("TotalRating")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Category");

                    b.HasIndex("Count");

                    b.HasIndex("DateCreated");

                    b.HasIndex("Genre");

                    b.HasIndex("Name");

                    b.HasIndex("Price");

                    b.HasIndex("RatingByAge");

                    b.HasIndex("TotalRating");

                    b.ToTable("Product");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Background = "backgroundAwsLink",
                            Category = 11,
                            Count = 2,
                            DateCreated = new DateTime(2020, 7, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Genre = 10,
                            Logo = "logoAwsLink",
                            Name = "Wii Sports",
                            Price = 16.600000000000001,
                            RatingByAge = 1,
                            TotalRating = 0
                        },
                        new
                        {
                            Id = 2,
                            Background = "backgroundAwsLink",
                            Category = 11,
                            Count = 2,
                            DateCreated = new DateTime(2021, 7, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Genre = 4,
                            Logo = "logoAwsLink",
                            Name = "Wii Sports",
                            Price = 17.600000000000001,
                            RatingByAge = 1,
                            TotalRating = 0
                        },
                        new
                        {
                            Id = 3,
                            Background = "backgroundAwsLink",
                            Category = 11,
                            Count = 2,
                            DateCreated = new DateTime(2021, 7, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Genre = 18,
                            Logo = "logoAwsLink",
                            Name = "Wii Sports",
                            Price = 18.600000000000001,
                            RatingByAge = 5,
                            TotalRating = 0
                        },
                        new
                        {
                            Id = 4,
                            Background = "backgroundAwsLink",
                            Category = 11,
                            Count = 2,
                            DateCreated = new DateTime(2021, 7, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Genre = 18,
                            Logo = "logoAwsLink",
                            Name = "Wii Sports",
                            Price = 19.600000000000001,
                            RatingByAge = 5,
                            TotalRating = 0
                        },
                        new
                        {
                            Id = 5,
                            Background = "backgroundAwsLink",
                            Category = 11,
                            Count = 2,
                            DateCreated = new DateTime(2021, 7, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Genre = 2,
                            Logo = "logoAwsLink",
                            Name = "Wii Sports",
                            Price = 16.899999999999999,
                            RatingByAge = 1,
                            TotalRating = 0
                        },
                        new
                        {
                            Id = 6,
                            Background = "backgroundAwsLink",
                            Category = 11,
                            Count = 2,
                            DateCreated = new DateTime(2021, 7, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Genre = 6,
                            Logo = "logoAwsLink",
                            Name = "Wii Sports",
                            Price = 16.800000000000001,
                            RatingByAge = 5,
                            TotalRating = 0
                        },
                        new
                        {
                            Id = 7,
                            Background = "backgroundAwsLink",
                            Category = 11,
                            Count = 2,
                            DateCreated = new DateTime(2021, 7, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Genre = 7,
                            Logo = "logoAwsLink",
                            Name = "Wii Sports",
                            Price = 16.699999999999999,
                            RatingByAge = 2,
                            TotalRating = 0
                        },
                        new
                        {
                            Id = 8,
                            Background = "backgroundAwsLink",
                            Category = 11,
                            Count = 2,
                            DateCreated = new DateTime(2021, 7, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Genre = 15,
                            Logo = "logoAwsLink",
                            Name = "Wii Sports",
                            Price = 14.6,
                            RatingByAge = 1,
                            TotalRating = 0
                        },
                        new
                        {
                            Id = 9,
                            Background = "backgroundAwsLink",
                            Category = 11,
                            Count = 2,
                            DateCreated = new DateTime(2021, 7, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Genre = 24,
                            Logo = "logoAwsLink",
                            Name = "Wii Sports",
                            Price = 13.5,
                            RatingByAge = 3,
                            TotalRating = 0
                        },
                        new
                        {
                            Id = 10,
                            Background = "backgroundAwsLink",
                            Category = 11,
                            Count = 2,
                            DateCreated = new DateTime(2021, 7, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Genre = 19,
                            Logo = "logoAwsLink",
                            Name = "Wii Sports",
                            Price = 12.4,
                            RatingByAge = 4,
                            TotalRating = 0
                        },
                        new
                        {
                            Id = 11,
                            Background = "backgroundAwsLink",
                            Category = 11,
                            Count = 2,
                            DateCreated = new DateTime(2021, 7, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Genre = 22,
                            Logo = "logoAwsLink",
                            Name = "Wii Sports",
                            Price = 11.300000000000001,
                            RatingByAge = 1,
                            TotalRating = 0
                        },
                        new
                        {
                            Id = 12,
                            Background = "backgroundAwsLink",
                            Category = 11,
                            Count = 2,
                            DateCreated = new DateTime(2021, 7, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Genre = 26,
                            Logo = "logoAwsLink",
                            Name = "Wii Sports",
                            Price = 10.199999999999999,
                            RatingByAge = 4,
                            TotalRating = 0
                        },
                        new
                        {
                            Id = 13,
                            Background = "backgroundAwsLink",
                            Category = 11,
                            Count = 2,
                            DateCreated = new DateTime(2021, 7, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Genre = 25,
                            Logo = "logoAwsLink",
                            Name = "Wii Sports",
                            Price = 9.0999999999999996,
                            RatingByAge = 1,
                            TotalRating = 0
                        },
                        new
                        {
                            Id = 14,
                            Background = "backgroundAwsLink",
                            Category = 11,
                            Count = 2,
                            DateCreated = new DateTime(2021, 7, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Genre = 17,
                            Logo = "logoAwsLink",
                            Name = "Wii Sports",
                            Price = 18.600000000000001,
                            RatingByAge = 5,
                            TotalRating = 0
                        },
                        new
                        {
                            Id = 15,
                            Background = "backgroundAwsLink",
                            Category = 11,
                            Count = 2,
                            DateCreated = new DateTime(2021, 7, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Genre = 16,
                            Logo = "logoAwsLink",
                            Name = "Wii Sports",
                            Price = 76.599999999999994,
                            RatingByAge = 2,
                            TotalRating = 0
                        },
                        new
                        {
                            Id = 16,
                            Background = "backgroundAwsLink",
                            Category = 11,
                            Count = 2,
                            DateCreated = new DateTime(2021, 7, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Genre = 10,
                            Logo = "logoAwsLink",
                            Name = "Wii Sports",
                            Price = 96.599999999999994,
                            RatingByAge = 1,
                            TotalRating = 0
                        });
                });

            modelBuilder.Entity("Web.DAL.Models.ProductRating", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("AppUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Rating")
                        .HasColumnType("int")
                        .HasColumnName("Rating");

                    b.HasKey("ProductId", "AppUserId");

                    b.HasIndex("AppUserId");

                    b.HasIndex("Rating");

                    b.ToTable("ProductRating");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            AppUserId = "66ed099c-e1c0-472d-8121-219a8b71845c",
                            Rating = 1
                        },
                        new
                        {
                            ProductId = 2,
                            AppUserId = "d29c9933-ab7e-4c67-ac10-2e83498cfd5b",
                            Rating = 1
                        },
                        new
                        {
                            ProductId = 3,
                            AppUserId = "9ea9f8ba-e47a-4d64-9730-4efe97a66b56",
                            Rating = 1
                        },
                        new
                        {
                            ProductId = 4,
                            AppUserId = "bba7cb72-2c9a-4881-9963-d167c5b08be1",
                            Rating = 1
                        },
                        new
                        {
                            ProductId = 5,
                            AppUserId = "61957aa7-7235-40c7-9f3c-7a38eca6d3f2",
                            Rating = 1
                        },
                        new
                        {
                            ProductId = 6,
                            AppUserId = "d3fb6a5e-fd38-47d3-8640-f672957f6f29",
                            Rating = 1
                        },
                        new
                        {
                            ProductId = 7,
                            AppUserId = "b4366b08-fbaf-4d3f-8321-7d3bf3984131",
                            Rating = 1
                        },
                        new
                        {
                            ProductId = 8,
                            AppUserId = "997c2bcf-16d0-48f8-85d8-9d35a1995dfe",
                            Rating = 1
                        },
                        new
                        {
                            ProductId = 10,
                            AppUserId = "61be7ef2-a72c-48e4-9ac7-b18c9e522831",
                            Rating = 1
                        },
                        new
                        {
                            ProductId = 11,
                            AppUserId = "7938b9dd-204a-40e0-8225-433153e69205",
                            Rating = 1
                        },
                        new
                        {
                            ProductId = 12,
                            AppUserId = "614980c7-d662-4069-b914-054fdcbeb645",
                            Rating = 1
                        },
                        new
                        {
                            ProductId = 13,
                            AppUserId = "3fde5d80-dfec-4eee-bc9e-e267bb8d441d",
                            Rating = 1
                        },
                        new
                        {
                            ProductId = 14,
                            AppUserId = "64c99134-bc18-4a5e-a63c-5c8f007aa469",
                            Rating = 1
                        },
                        new
                        {
                            ProductId = 15,
                            AppUserId = "1a49310f-9095-41a9-afb3-2cccf843b31a",
                            Rating = 1
                        },
                        new
                        {
                            ProductId = 16,
                            AppUserId = "52241da1-0242-449c-ab06-7f7a517bd00e",
                            Rating = 1
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Web.DAL.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Web.DAL.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Web.DAL.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Web.DAL.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Web.DAL.Models.ProductRating", b =>
                {
                    b.HasOne("Web.DAL.Models.AppUser", "AppUser")
                        .WithMany("ProductRatings")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Web.DAL.Models.Product", "Product")
                        .WithMany("ProductRatings")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Web.DAL.Models.AppUser", b =>
                {
                    b.Navigation("ProductRatings");
                });

            modelBuilder.Entity("Web.DAL.Models.Product", b =>
                {
                    b.Navigation("ProductRatings");
                });
#pragma warning restore 612, 618
        }
    }
}
