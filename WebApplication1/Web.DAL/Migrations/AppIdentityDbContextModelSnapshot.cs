// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Web.DAL.Models;

namespace Web.DAL.Migrations
{
    [DbContext(typeof(AppIdentityDbContext))]
    partial class AppIdentityDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.6")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Web.DAL.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Login")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "06524f74-cd5d-4f06-b507-bf3ee9a23e41",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "46988902-dece-4ee4-8838-47f649cd9183",
                            EmailConfirmed = false,
                            LastName = "Jones",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "04fb5441-0d12-4c4c-8e57-62c02decf595",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "fd9b5508-8f60-48cf-a2a8-c5cb1bbfd9a9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2ec2ac44-c568-4cf7-a24b-3c70f2bb6d20",
                            EmailConfirmed = false,
                            LastName = "Trump",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f2a906f7-b271-4a77-ac81-697816b4dea9",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "6bce5df3-b1db-474d-a988-16d3bba59888",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "deb5ad1f-d7d4-4563-b615-85a4314481d2",
                            EmailConfirmed = false,
                            LastName = "Obama",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f2760e09-a78a-44b3-b979-4db6bd49e32c",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "f302d844-0a0c-4470-bbaa-fe99adddd806",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a4c4da26-dbb0-422e-b46e-84c6f19cbb73",
                            EmailConfirmed = false,
                            LastName = "Richter",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b2762185-1496-4f9f-aa74-07cf43c41950",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "95241a85-2329-4dbc-bb16-ae288f510936",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d58b9115-b650-4054-a3cf-19fe8eafdea9",
                            EmailConfirmed = false,
                            LastName = "Suzuki",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3139b65f-b0fd-4a33-8bd6-6501d8b75490",
                            TwoFactorEnabled = false
                        });
                });

            modelBuilder.Entity("Web.DAL.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AppUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("OrderNumber")
                        .HasColumnType("int");

                    b.HasKey("OrderId");

                    b.HasIndex("AppUserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Web.DAL.Models.OrderProduct", b =>
                {
                    b.Property<int>("OrderProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AmountOfProducts")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("OrderProductId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderProducts");
                });

            modelBuilder.Entity("Web.DAL.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Background")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<int>("Genre")
                        .HasColumnType("int");

                    b.Property<string>("Logo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("RatingByAge")
                        .HasColumnType("int");

                    b.Property<int>("TotalRating")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Category");

                    b.HasIndex("Count");

                    b.HasIndex("DateCreated");

                    b.HasIndex("Genre");

                    b.HasIndex("Name");

                    b.HasIndex("Price");

                    b.HasIndex("RatingByAge");

                    b.HasIndex("TotalRating");

                    b.ToTable("Product");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Background = "backgroundAwsLink",
                            Category = 11,
                            Count = 2,
                            DateCreated = new DateTime(2020, 7, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Genre = 10,
                            Logo = "logoAwsLink",
                            Name = "Wii Sports",
                            Price = 16.600000000000001,
                            RatingByAge = 1,
                            TotalRating = 0
                        },
                        new
                        {
                            Id = 2,
                            Background = "backgroundAwsLink",
                            Category = 11,
                            Count = 2,
                            DateCreated = new DateTime(2021, 7, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Genre = 10,
                            Logo = "logoAwsLink",
                            Name = "Wii Sports",
                            Price = 17.600000000000001,
                            RatingByAge = 1,
                            TotalRating = 0
                        },
                        new
                        {
                            Id = 3,
                            Background = "backgroundAwsLink",
                            Category = 11,
                            Count = 2,
                            DateCreated = new DateTime(2021, 7, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Genre = 10,
                            Logo = "logoAwsLink",
                            Name = "Wii Sports",
                            Price = 18.600000000000001,
                            RatingByAge = 1,
                            TotalRating = 0
                        },
                        new
                        {
                            Id = 4,
                            Background = "backgroundAwsLink",
                            Category = 11,
                            Count = 2,
                            DateCreated = new DateTime(2021, 7, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Genre = 10,
                            Logo = "logoAwsLink",
                            Name = "Wii Sports",
                            Price = 19.600000000000001,
                            RatingByAge = 1,
                            TotalRating = 0
                        },
                        new
                        {
                            Id = 5,
                            Background = "backgroundAwsLink",
                            Category = 11,
                            Count = 2,
                            DateCreated = new DateTime(2021, 7, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Genre = 10,
                            Logo = "logoAwsLink",
                            Name = "Wii Sports",
                            Price = 16.899999999999999,
                            RatingByAge = 1,
                            TotalRating = 0
                        },
                        new
                        {
                            Id = 6,
                            Background = "backgroundAwsLink",
                            Category = 11,
                            Count = 2,
                            DateCreated = new DateTime(2021, 7, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Genre = 10,
                            Logo = "logoAwsLink",
                            Name = "Wii Sports",
                            Price = 16.800000000000001,
                            RatingByAge = 1,
                            TotalRating = 0
                        },
                        new
                        {
                            Id = 7,
                            Background = "backgroundAwsLink",
                            Category = 11,
                            Count = 2,
                            DateCreated = new DateTime(2021, 7, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Genre = 10,
                            Logo = "logoAwsLink",
                            Name = "Wii Sports",
                            Price = 16.699999999999999,
                            RatingByAge = 1,
                            TotalRating = 0
                        },
                        new
                        {
                            Id = 8,
                            Background = "backgroundAwsLink",
                            Category = 11,
                            Count = 2,
                            DateCreated = new DateTime(2021, 7, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Genre = 10,
                            Logo = "logoAwsLink",
                            Name = "Wii Sports",
                            Price = 14.6,
                            RatingByAge = 1,
                            TotalRating = 0
                        },
                        new
                        {
                            Id = 9,
                            Background = "backgroundAwsLink",
                            Category = 11,
                            Count = 2,
                            DateCreated = new DateTime(2021, 7, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Genre = 10,
                            Logo = "logoAwsLink",
                            Name = "Wii Sports",
                            Price = 13.5,
                            RatingByAge = 1,
                            TotalRating = 0
                        },
                        new
                        {
                            Id = 10,
                            Background = "backgroundAwsLink",
                            Category = 11,
                            Count = 2,
                            DateCreated = new DateTime(2021, 7, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Genre = 10,
                            Logo = "logoAwsLink",
                            Name = "Wii Sports",
                            Price = 12.4,
                            RatingByAge = 1,
                            TotalRating = 0
                        },
                        new
                        {
                            Id = 11,
                            Background = "backgroundAwsLink",
                            Category = 11,
                            Count = 2,
                            DateCreated = new DateTime(2021, 7, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Genre = 10,
                            Logo = "logoAwsLink",
                            Name = "Wii Sports",
                            Price = 11.300000000000001,
                            RatingByAge = 1,
                            TotalRating = 0
                        },
                        new
                        {
                            Id = 12,
                            Background = "backgroundAwsLink",
                            Category = 11,
                            Count = 2,
                            DateCreated = new DateTime(2021, 7, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Genre = 10,
                            Logo = "logoAwsLink",
                            Name = "Wii Sports",
                            Price = 10.199999999999999,
                            RatingByAge = 1,
                            TotalRating = 0
                        },
                        new
                        {
                            Id = 13,
                            Background = "backgroundAwsLink",
                            Category = 11,
                            Count = 2,
                            DateCreated = new DateTime(2021, 7, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Genre = 10,
                            Logo = "logoAwsLink",
                            Name = "Wii Sports",
                            Price = 9.0999999999999996,
                            RatingByAge = 1,
                            TotalRating = 0
                        },
                        new
                        {
                            Id = 14,
                            Background = "backgroundAwsLink",
                            Category = 11,
                            Count = 2,
                            DateCreated = new DateTime(2021, 7, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Genre = 10,
                            Logo = "logoAwsLink",
                            Name = "Wii Sports",
                            Price = 18.600000000000001,
                            RatingByAge = 5,
                            TotalRating = 0
                        },
                        new
                        {
                            Id = 15,
                            Background = "backgroundAwsLink",
                            Category = 11,
                            Count = 2,
                            DateCreated = new DateTime(2021, 7, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Genre = 16,
                            Logo = "logoAwsLink",
                            Name = "Wii Sports",
                            Price = 76.599999999999994,
                            RatingByAge = 1,
                            TotalRating = 0
                        },
                        new
                        {
                            Id = 16,
                            Background = "backgroundAwsLink",
                            Category = 11,
                            Count = 2,
                            DateCreated = new DateTime(2021, 7, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Genre = 10,
                            Logo = "logoAwsLink",
                            Name = "Wii Sports",
                            Price = 96.599999999999994,
                            RatingByAge = 1,
                            TotalRating = 0
                        });
                });

            modelBuilder.Entity("Web.DAL.Models.ProductRating", b =>
                {
                    b.Property<int>("ProductRatingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AppUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int")
                        .HasColumnName("Rating");

                    b.HasKey("ProductRatingId");

                    b.HasIndex("AppUserId");

                    b.HasIndex("ProductId");

                    b.HasIndex("Rating");

                    b.ToTable("ProductRating");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Web.DAL.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Web.DAL.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Web.DAL.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Web.DAL.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Web.DAL.Models.Order", b =>
                {
                    b.HasOne("Web.DAL.Models.AppUser", "AppUser")
                        .WithMany("Orders")
                        .HasForeignKey("AppUserId");

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("Web.DAL.Models.OrderProduct", b =>
                {
                    b.HasOne("Web.DAL.Models.Order", "Order")
                        .WithMany("OrderProducts")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Web.DAL.Models.Product", "Product")
                        .WithMany("OrderProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Web.DAL.Models.ProductRating", b =>
                {
                    b.HasOne("Web.DAL.Models.AppUser", "AppUser")
                        .WithMany("ProductRatings")
                        .HasForeignKey("AppUserId");

                    b.HasOne("Web.DAL.Models.Product", "Product")
                        .WithMany("ProductRatings")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Web.DAL.Models.AppUser", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("ProductRatings");
                });

            modelBuilder.Entity("Web.DAL.Models.Order", b =>
                {
                    b.Navigation("OrderProducts");
                });

            modelBuilder.Entity("Web.DAL.Models.Product", b =>
                {
                    b.Navigation("OrderProducts");

                    b.Navigation("ProductRatings");
                });
#pragma warning restore 612, 618
        }
    }
}
