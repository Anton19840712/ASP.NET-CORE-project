// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Web.DAL.Models;

namespace Web.DAL.Migrations
{
    [DbContext(typeof(AppIdentityDbContext))]
    [Migration("20210622082545_InitialMigrationNextNext")]
    partial class InitialMigrationNextNext
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.6")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Web.DAL.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "18a47106-2692-46de-96f2-d485eb2c0bec",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6602f046-86b7-4110-81fd-d1ed9bc4f4b7",
                            EmailConfirmed = false,
                            LastName = "Jones",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9c42732e-0875-474f-aeec-69e86b03bfa2",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "877d5766-deda-4562-a3ad-69606c45d3df",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "280ac113-e92c-4658-a915-60408027da2f",
                            EmailConfirmed = false,
                            LastName = "Trump",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0a655826-e988-4f9e-9aaa-ebbb37c3ce41",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "2a938e79-0e3e-4b7c-bd87-2fcbf6aa5c53",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "39fe5b74-5a04-47e1-8b46-1a1eab7627b8",
                            EmailConfirmed = false,
                            LastName = "Obama",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fd949c9b-e311-4495-93ee-7418c419e24c",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "2d231270-a47e-433f-9f22-a9b4dd2351ff",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "72ebed4c-5785-43c2-bcb5-4b9111c50c79",
                            EmailConfirmed = false,
                            LastName = "Richter",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4c721227-4826-4635-9665-3f7f1a62ed45",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "9c52f38e-1158-44c6-a532-71022b84d3ad",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1be8e89a-3704-4e35-8eeb-59e27b6b6836",
                            EmailConfirmed = false,
                            LastName = "Suzuki",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "86e8d66d-d4a6-4dff-82ef-1ae5ac2cad0e",
                            TwoFactorEnabled = false
                        });
                });

            modelBuilder.Entity("Web.DAL.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdditionalName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Background")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<int>("Genre")
                        .HasColumnType("int");

                    b.Property<string>("Logo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("RatingByAge")
                        .HasColumnType("int");

                    b.Property<int>("TotalRating")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Category");

                    b.HasIndex("Count");

                    b.HasIndex("DateCreated");

                    b.HasIndex("Genre");

                    b.HasIndex("Name");

                    b.HasIndex("Price");

                    b.HasIndex("RatingByAge");

                    b.HasIndex("TotalRating");

                    b.ToTable("Product");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AdditionalName = "Anton",
                            Background = "backgroundAwsLink",
                            Category = 11,
                            Count = 2,
                            DateCreated = new DateTime(2020, 7, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Genre = 10,
                            Logo = "logoAwsLink",
                            Name = "Wii Sports",
                            Price = 16.600000000000001,
                            RatingByAge = 1,
                            TotalRating = 0
                        },
                        new
                        {
                            Id = 2,
                            AdditionalName = "Anton",
                            Background = "backgroundAwsLink",
                            Category = 11,
                            Count = 2,
                            DateCreated = new DateTime(2021, 7, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Genre = 10,
                            Logo = "logoAwsLink",
                            Name = "Wii Sports",
                            Price = 17.600000000000001,
                            RatingByAge = 1,
                            TotalRating = 0
                        },
                        new
                        {
                            Id = 3,
                            AdditionalName = "Anton",
                            Background = "backgroundAwsLink",
                            Category = 11,
                            Count = 2,
                            DateCreated = new DateTime(2021, 7, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Genre = 10,
                            Logo = "logoAwsLink",
                            Name = "Wii Sports",
                            Price = 18.600000000000001,
                            RatingByAge = 1,
                            TotalRating = 0
                        },
                        new
                        {
                            Id = 4,
                            AdditionalName = "Anton",
                            Background = "backgroundAwsLink",
                            Category = 11,
                            Count = 2,
                            DateCreated = new DateTime(2021, 7, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Genre = 10,
                            Logo = "logoAwsLink",
                            Name = "Wii Sports",
                            Price = 19.600000000000001,
                            RatingByAge = 1,
                            TotalRating = 0
                        },
                        new
                        {
                            Id = 5,
                            AdditionalName = "Anton",
                            Background = "backgroundAwsLink",
                            Category = 11,
                            Count = 2,
                            DateCreated = new DateTime(2021, 7, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Genre = 10,
                            Logo = "logoAwsLink",
                            Name = "Wii Sports",
                            Price = 16.899999999999999,
                            RatingByAge = 1,
                            TotalRating = 0
                        },
                        new
                        {
                            Id = 6,
                            AdditionalName = "Anton",
                            Background = "backgroundAwsLink",
                            Category = 11,
                            Count = 2,
                            DateCreated = new DateTime(2021, 7, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Genre = 10,
                            Logo = "logoAwsLink",
                            Name = "Wii Sports",
                            Price = 16.800000000000001,
                            RatingByAge = 1,
                            TotalRating = 0
                        },
                        new
                        {
                            Id = 7,
                            AdditionalName = "Anton",
                            Background = "backgroundAwsLink",
                            Category = 11,
                            Count = 2,
                            DateCreated = new DateTime(2021, 7, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Genre = 10,
                            Logo = "logoAwsLink",
                            Name = "Wii Sports",
                            Price = 16.699999999999999,
                            RatingByAge = 1,
                            TotalRating = 0
                        },
                        new
                        {
                            Id = 8,
                            AdditionalName = "Anton",
                            Background = "backgroundAwsLink",
                            Category = 11,
                            Count = 2,
                            DateCreated = new DateTime(2021, 7, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Genre = 10,
                            Logo = "logoAwsLink",
                            Name = "Wii Sports",
                            Price = 14.6,
                            RatingByAge = 1,
                            TotalRating = 0
                        },
                        new
                        {
                            Id = 9,
                            AdditionalName = "Anton",
                            Background = "backgroundAwsLink",
                            Category = 11,
                            Count = 2,
                            DateCreated = new DateTime(2021, 7, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Genre = 10,
                            Logo = "logoAwsLink",
                            Name = "Wii Sports",
                            Price = 13.5,
                            RatingByAge = 1,
                            TotalRating = 0
                        },
                        new
                        {
                            Id = 10,
                            AdditionalName = "Anton",
                            Background = "backgroundAwsLink",
                            Category = 11,
                            Count = 2,
                            DateCreated = new DateTime(2021, 7, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Genre = 10,
                            Logo = "logoAwsLink",
                            Name = "Wii Sports",
                            Price = 12.4,
                            RatingByAge = 1,
                            TotalRating = 0
                        },
                        new
                        {
                            Id = 11,
                            AdditionalName = "Anton",
                            Background = "backgroundAwsLink",
                            Category = 11,
                            Count = 2,
                            DateCreated = new DateTime(2021, 7, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Genre = 10,
                            Logo = "logoAwsLink",
                            Name = "Wii Sports",
                            Price = 11.300000000000001,
                            RatingByAge = 1,
                            TotalRating = 0
                        },
                        new
                        {
                            Id = 12,
                            AdditionalName = "Anton",
                            Background = "backgroundAwsLink",
                            Category = 11,
                            Count = 2,
                            DateCreated = new DateTime(2021, 7, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Genre = 10,
                            Logo = "logoAwsLink",
                            Name = "Wii Sports",
                            Price = 10.199999999999999,
                            RatingByAge = 1,
                            TotalRating = 0
                        },
                        new
                        {
                            Id = 13,
                            AdditionalName = "Anton",
                            Background = "backgroundAwsLink",
                            Category = 11,
                            Count = 2,
                            DateCreated = new DateTime(2021, 7, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Genre = 10,
                            Logo = "logoAwsLink",
                            Name = "Wii Sports",
                            Price = 9.0999999999999996,
                            RatingByAge = 1,
                            TotalRating = 0
                        },
                        new
                        {
                            Id = 14,
                            AdditionalName = "Anton",
                            Background = "backgroundAwsLink",
                            Category = 11,
                            Count = 2,
                            DateCreated = new DateTime(2021, 7, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Genre = 10,
                            Logo = "logoAwsLink",
                            Name = "Wii Sports",
                            Price = 18.600000000000001,
                            RatingByAge = 5,
                            TotalRating = 0
                        },
                        new
                        {
                            Id = 15,
                            AdditionalName = "Anton",
                            Background = "backgroundAwsLink",
                            Category = 11,
                            Count = 2,
                            DateCreated = new DateTime(2021, 7, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Genre = 16,
                            Logo = "logoAwsLink",
                            Name = "Wii Sports",
                            Price = 76.599999999999994,
                            RatingByAge = 1,
                            TotalRating = 0
                        },
                        new
                        {
                            Id = 16,
                            AdditionalName = "Anton",
                            Background = "backgroundAwsLink",
                            Category = 11,
                            Count = 2,
                            DateCreated = new DateTime(2021, 7, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Genre = 10,
                            Logo = "logoAwsLink",
                            Name = "Wii Sports",
                            Price = 96.599999999999994,
                            RatingByAge = 1,
                            TotalRating = 0
                        });
                });

            modelBuilder.Entity("Web.DAL.Models.ProductRating", b =>
                {
                    b.Property<int>("ProductRatingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AppUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int")
                        .HasColumnName("Rating");

                    b.HasKey("ProductRatingId");

                    b.HasIndex("AppUserId");

                    b.HasIndex("ProductId");

                    b.HasIndex("Rating");

                    b.ToTable("ProductRating");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Web.DAL.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Web.DAL.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Web.DAL.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Web.DAL.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Web.DAL.Models.ProductRating", b =>
                {
                    b.HasOne("Web.DAL.Models.AppUser", "AppUser")
                        .WithMany("ProductRatings")
                        .HasForeignKey("AppUserId");

                    b.HasOne("Web.DAL.Models.Product", "Product")
                        .WithMany("ProductRatings")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Web.DAL.Models.AppUser", b =>
                {
                    b.Navigation("ProductRatings");
                });

            modelBuilder.Entity("Web.DAL.Models.Product", b =>
                {
                    b.Navigation("ProductRatings");
                });
#pragma warning restore 612, 618
        }
    }
}
